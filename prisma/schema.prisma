generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int             @id @default(autoincrement())
  name      String
  surname   String
  email     String          @unique
  phone     String          @unique
  bio       String?
  address   String?
  country   Country         @relation(fields: [countryId], references: [id])
  countryId Int
  projects  Membership[]
  tasks     Participation[]
  sended    Message[]       @relation(name: "sender")
  received  Message[]       @relation(name: "receiver")
  files     File[]
}

model Project {
  id          Int          @id @default(autoincrement())
  title       String       @unique
  description String
  image       String?      @unique
  visibility  Visibility
  fields      Field[]
  members     Membership[]
  tasks       Task[]
  release     Release?
  messages    Message[]
  files       File[]
}

model Release {
  id        Int     @id @default(autoincrement())
  link      String? @unique
  price     Float
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int     @unique
}

model Membership {
  id        Int     @id @default(autoincrement())
  isLeader  Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model Participation {
  id       Int     @id @default(autoincrement())
  isLeader Boolean @default(false)
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  task     Task    @relation(fields: [taskId], references: [id])
  taskId   Int
}

model Task {
  id           Int             @id @default(autoincrement())
  title        String
  description  String
  status       Status?
  subtasks     Subtask[]
  project      Project         @relation(fields: [projectId], references: [id])
  projectId    Int
  participants Participation[]
  messages     Message[]
}

model Subtask {
  id          Int    @id @default(autoincrement())
  title       String
  description String
  status      Status @default(PENDING)
  task        Task   @relation(fields: [taskId], references: [id])
  taskId      Int
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String   @db.Text
  seen       Boolean  @default(false)
  sender     User     @relation(name: "sender", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation(name: "receiver", fields: [receiverId], references: [id])
  receiverId Int
  project    Project? @relation(fields: [projectId], references: [id])
  projectId  Int
  task       Task?    @relation(fields: [taskId], references: [id])
  taskId     Int
}

model File {
  id        Int     @id @default(autoincrement())
  src       String
  project   Project @relation(fields: [projectId], references: [id])
  projectId Int
  author    User    @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id          Int          @id @default(autoincrement())
  title       String
  curriculum  String?
  fields      Field[]
  skills      Skill[]
  experiences Experience[]
  candidacies Candidate[]
  internships Intern[]
}

model Experience {
  id          Int      @id @default(autoincrement())
  name        String
  post        String
  description String?  @db.Text
  phone       String?
  from        DateTime
  to          DateTime
  profile     Profile  @relation(fields: [profileId], references: [id])
  profileId   Int
}

model Candidate {
  id          Int     @id @default(autoincrement())
  description String  @db.Text
  profile     Profile @relation(fields: [profileId], references: [id])
  profileId   Int
}

model Intern {
  id          Int     @id @default(autoincrement())
  description String  @db.Text
  profile     Profile @relation(fields: [profileId], references: [id])
  profileId   Int
  // Institution
}

model Field {
  id       Int       @id @default(autoincrement())
  title    String    @unique
  projects Project[]
  profiles Profile[]
}

model Skill {
  id       Int       @id @default(autoincrement())
  title    String
  profiles Profile[]
}

model Country {
  id    Int    @id @default(autoincrement())
  name  String
  code  String
  users User[]
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum Status {
  PENDING
  IN_PROCESS
  DONE
}
